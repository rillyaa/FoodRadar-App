import CONFIG from"../../scripts/globals/config";const openDB=()=>new Promise(((e,t)=>{const r=indexedDB.open(CONFIG.DATABASE_NAME,CONFIG.DATABASE_VERSION);r.onerror=e=>{t(`Database error: ${e.target.errorCode}`)},r.onsuccess=t=>{e(t.target.result)},r.onupgradeneeded=e=>{const t=e.target.result;t.objectStoreNames.contains(CONFIG.OBJECT_STORE_NAME)||t.createObjectStore(CONFIG.OBJECT_STORE_NAME,{keyPath:"id"})}})),getRestaurant=async e=>{const t=await openDB();if(!e)throw new Error("Cannot get restaurant: ID is missing");return new Promise(((r,n)=>{const a=t.transaction([CONFIG.OBJECT_STORE_NAME],"readonly").objectStore(CONFIG.OBJECT_STORE_NAME).get(e);a.onsuccess=()=>{r(a.result)},a.onerror=()=>{n(`Get restaurant failed: ${a.error}`)}}))},getAllRestaurants=async()=>{const e=await openDB();return new Promise(((t,r)=>{const n=e.transaction([CONFIG.OBJECT_STORE_NAME],"readonly").objectStore(CONFIG.OBJECT_STORE_NAME).getAll();n.onsuccess=()=>{t(n.result)},n.onerror=()=>{r(`Get all restaurants failed: ${n.error}`)}}))},addRestaurant=async e=>{const t=await openDB();if(!e.id)throw new Error("Cannot add restaurant: Restaurant ID is missing");return new Promise(((r,n)=>{const a=t.transaction([CONFIG.OBJECT_STORE_NAME],"readwrite").objectStore(CONFIG.OBJECT_STORE_NAME).put(e);a.onsuccess=()=>{r()},a.onerror=()=>{n(`Add restaurant failed: ${a.error}`)}}))},deleteRestaurant=async e=>{const t=await openDB();return new Promise(((r,n)=>{const a=t.transaction([CONFIG.OBJECT_STORE_NAME],"readwrite").objectStore(CONFIG.OBJECT_STORE_NAME).delete(e);a.onsuccess=()=>{r()},a.onerror=()=>{n(`Delete restaurant failed: ${a.error}`)}}))};export{getRestaurant,getAllRestaurants,addRestaurant,deleteRestaurant};